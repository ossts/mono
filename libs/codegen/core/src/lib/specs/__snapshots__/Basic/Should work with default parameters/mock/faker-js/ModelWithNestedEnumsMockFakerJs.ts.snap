/* istanbul ignore file */
import { faker as fakerDefault } from '@faker-js/faker';

import { ModelWithNestedEnums } from '../../common/models';
import { abstractGenerateFn, createCallStack } from './helpersMockFakerJs';
import type {
  MockFakerJSGeneratorParams,
  MockFakerJSGeneratorParamsMode,
  ModelOrIdNullable,
} from './typesMockFakerJs';

export function getModelWithNestedEnumsMockFakerJs<
  TMode extends 'withReferences'
>(
  params?: MockFakerJSGeneratorParams<TMode>
): ModelOrIdNullable<ModelWithNestedEnums> | null | ModelWithNestedEnums['id'];

export function getModelWithNestedEnumsMockFakerJs<TMode extends 'standalone'>(
  params?: MockFakerJSGeneratorParams<TMode>
): ModelWithNestedEnums | null;

export function getModelWithNestedEnumsMockFakerJs<
  TMode extends MockFakerJSGeneratorParamsMode = 'withReferences'
>(
  params: MockFakerJSGeneratorParams<TMode> = {}
): ModelOrIdNullable<ModelWithNestedEnums> | null | ModelWithNestedEnums['id'] {
  const modelName = 'ModelWithNestedEnums';

  const { faker = fakerDefault, fakerParams: { probability } = {} } = params;

  return abstractGenerateFn<ModelWithNestedEnums, TMode>(
    modelName,
    params,
    (callStack) => ({
      dictionaryWithEnum: faker.helpers.maybe(
        () => ({
          [faker.string.alpha({
            length: {
              min: 2,
              max: 10,
            },
          })]: faker.helpers.maybe(
            () =>
              faker.helpers.arrayElement([
                faker.helpers.fake('Success'),
                faker.helpers.fake('Warning'),
                faker.helpers.fake('Error'),
              ]),
            {
              probability,
            }
          ),
        }),
        {
          probability,
        }
      ),
      dictionaryWithEnumFromDescription: faker.helpers.maybe(
        () => ({
          [faker.string.alpha({
            length: {
              min: 2,
              max: 10,
            },
          })]: faker.helpers.maybe(() => faker.number.int(), {
            probability,
          }),
        }),
        {
          probability,
        }
      ),
      arrayWithEnum: faker.helpers.maybe(
        () =>
          faker.helpers.arrayElements([
            faker.helpers.arrayElement([
              faker.helpers.fake('Success'),
              faker.helpers.fake('Warning'),
              faker.helpers.fake('Error'),
            ]),
          ]),
        {
          probability,
        }
      ),
      arrayWithDescription: faker.helpers.maybe(
        () => faker.helpers.arrayElements([faker.number.int()]),
        {
          probability,
        }
      ),
    })
  );
}

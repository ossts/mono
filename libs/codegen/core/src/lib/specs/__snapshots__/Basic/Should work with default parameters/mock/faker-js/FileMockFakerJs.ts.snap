/* istanbul ignore file */
import { faker as fakerDefault } from '@faker-js/faker';

import { File } from '../../common/models';
import { abstractGenerateFn, createCallStack } from './helpersMockFakerJs';
import type {
  MockFakerJSGeneratorParams,
  MockFakerJSGeneratorParamsMode,
  ModelOrIdNullable,
} from './typesMockFakerJs';

export function getFileMockFakerJs<TMode extends 'withReferences'>(
  params?: MockFakerJSGeneratorParams<TMode>,
): ModelOrIdNullable<File> | null | File['id'];

export function getFileMockFakerJs<TMode extends 'standalone'>(
  params?: MockFakerJSGeneratorParams<TMode>,
): File | null;

export function getFileMockFakerJs<TMode extends 'primaryKey'>(
  params?: MockFakerJSGeneratorParams<TMode>,
): number | null;

export function getFileMockFakerJs<
  TMode extends MockFakerJSGeneratorParamsMode = 'withReferences',
>(
  params: MockFakerJSGeneratorParams<TMode> = {},
): ModelOrIdNullable<File> | null | File['id'] {
  const modelName = 'File';

  const { faker = fakerDefault, fakerParams: { probability } = {} } = params;

  return abstractGenerateFn<File, TMode>(modelName, params, (callStack) => ({
    id: faker.helpers.maybe(() => faker.string.uuid(), {
      probability,
    }),
    updated_at: faker.helpers.maybe(() => faker.date.anytime().toISOString(), {
      probability,
    }),
    created_at: faker.helpers.maybe(() => faker.date.anytime().toISOString(), {
      probability,
    }),
    mime: faker.string.alpha({ length: { min: 2, max: 10 } }),
    file: faker.helpers.maybe(
      () => faker.string.alpha({ length: { min: 2, max: 10 } }),
      {
        probability,
      },
    ),
  }));
}

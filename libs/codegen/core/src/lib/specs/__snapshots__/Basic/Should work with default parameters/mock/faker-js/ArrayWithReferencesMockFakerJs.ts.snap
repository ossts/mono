/* istanbul ignore file */
import { faker as fakerDefault } from '@faker-js/faker';

import { ArrayWithReferences } from '../../common/models';
import { getModelWithStringMockFakerJs } from './ModelWithStringMockFakerJs';
import { abstractGenerateFn, createCallStack } from './helpersMockFakerJs';
import type {
  MockFakerJSGeneratorParams,
  MockFakerJSGeneratorParamsMode,
  ModelOrIdNullable,
} from './typesMockFakerJs';

export function getArrayWithReferencesMockFakerJs<
  TMode extends 'standalone' = 'standalone'
>(params?: MockFakerJSGeneratorParams<TMode>): ArrayWithReferences | null {
  const modelName = 'ArrayWithReferences';

  const {
    faker = fakerDefault,
    fakerParams: { probability } = {},
    mode = 'standalone',
    callStack = createCallStack(),
  } = params ?? {};

  const callCount = callStack.entriesCallCount.get(modelName) ?? 0;
  if (callCount > 10) return null;

  const result: ArrayWithReferences = faker.helpers.arrayElements(
    [
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      getModelWithStringMockFakerJs<any>({
        ...params,
        callStack: createCallStack(callStack, modelName, 'ArrayWithReferences'),
      }),
    ]
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      .filter(Boolean) as any
  );

  return result;
}

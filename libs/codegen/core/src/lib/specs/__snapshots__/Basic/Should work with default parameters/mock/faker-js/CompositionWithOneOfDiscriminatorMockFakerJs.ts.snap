/* istanbul ignore file */
import { faker as fakerDefault } from '@faker-js/faker';

import { CompositionWithOneOfDiscriminator } from '../../common/models';
import { getModelCircleMockFakerJs } from './ModelCircleMockFakerJs';
import { getModelSquareMockFakerJs } from './ModelSquareMockFakerJs';
import { abstractGenerateFn, createCallStack } from './helpersMockFakerJs';
import type {
  MockFakerJSGeneratorParams,
  MockFakerJSGeneratorParamsMode,
  ModelOrIdNullable,
} from './typesMockFakerJs';

export function getCompositionWithOneOfDiscriminatorMockFakerJs<
  TMode extends 'standalone' = 'standalone',
>(
  params?: MockFakerJSGeneratorParams<TMode>,
): CompositionWithOneOfDiscriminator | null {
  const modelName = 'CompositionWithOneOfDiscriminator';

  const {
    faker = fakerDefault,
    fakerParams: { probability } = {},
    mode = 'standalone',
    callStack = createCallStack(),
  } = params ?? {};

  const callCount = callStack.entriesCallCount.get(modelName) ?? 0;
  if (callCount > 10) return null;

  const result: CompositionWithOneOfDiscriminator = faker.helpers.arrayElement([
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    getModelCircleMockFakerJs<any>({
      ...params,
      callStack: createCallStack(callStack, modelName),
    }), // eslint-disable-next-line @typescript-eslint/no-explicit-any
    getModelSquareMockFakerJs<any>({
      ...params,
      callStack: createCallStack(callStack, modelName),
    }),
  ]);

  return result;
}

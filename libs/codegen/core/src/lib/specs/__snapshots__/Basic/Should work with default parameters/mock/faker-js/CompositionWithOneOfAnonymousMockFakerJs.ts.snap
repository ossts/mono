/* istanbul ignore file */
import { faker as fakerDefault } from '@faker-js/faker';

import { CompositionWithOneOfAnonymous } from '../../common/models';
import { abstractGenerateFn, createCallStack } from './helpersMockFakerJs';
import type {
  MockFakerJSGeneratorParams,
  MockFakerJSGeneratorParamsMode,
  ModelOrIdNullable,
} from './typesMockFakerJs';

export function getCompositionWithOneOfAnonymousMockFakerJs<
  TMode extends 'withReferences'
>(
  params?: MockFakerJSGeneratorParams<TMode>
):
  | ModelOrIdNullable<CompositionWithOneOfAnonymous>
  | null
  | CompositionWithOneOfAnonymous['id'];

export function getCompositionWithOneOfAnonymousMockFakerJs<
  TMode extends 'standalone'
>(
  params?: MockFakerJSGeneratorParams<TMode>
): CompositionWithOneOfAnonymous | null;

export function getCompositionWithOneOfAnonymousMockFakerJs<
  TMode extends MockFakerJSGeneratorParamsMode = 'withReferences'
>(
  params: MockFakerJSGeneratorParams<TMode> = {}
):
  | ModelOrIdNullable<CompositionWithOneOfAnonymous>
  | null
  | CompositionWithOneOfAnonymous['id'] {
  const modelName = 'CompositionWithOneOfAnonymous';

  const { faker = fakerDefault, fakerParams: { probability } = {} } = params;

  return abstractGenerateFn<CompositionWithOneOfAnonymous, TMode>(
    modelName,
    params,
    (callStack) => ({
      propA: faker.helpers.maybe(
        () =>
          faker.helpers.arrayElement([
            {
              propA: faker.helpers.maybe(
                () => faker.string.alpha({ length: { min: 2, max: 10 } }),
                {
                  probability,
                }
              ),
            },
            faker.string.alpha({ length: { min: 2, max: 10 } }),
            faker.number.int(),
          ]),
        {
          probability,
        }
      ),
    })
  );
}

/* istanbul ignore file */
import { faker as fakerDefault } from '@faker-js/faker';

import { ModelSquare } from '../../common/models';
import { abstractGenerateFn, createCallStack } from './helpersMockFakerJs';
import type {
  MockFakerJSGeneratorParams,
  MockFakerJSGeneratorParamsMode,
  ModelOrIdNullable,
} from './typesMockFakerJs';

export function getModelSquareMockFakerJs<TMode extends 'withReferences'>(
  params?: MockFakerJSGeneratorParams<TMode>,
): ModelOrIdNullable<ModelSquare> | null;

export function getModelSquareMockFakerJs<TMode extends 'standalone'>(
  params?: MockFakerJSGeneratorParams<TMode>,
): ModelSquare | null;

export function getModelSquareMockFakerJs<TMode extends 'primaryKey'>(
  params?: MockFakerJSGeneratorParams<TMode>,
): number | null;

export function getModelSquareMockFakerJs<
  TMode extends MockFakerJSGeneratorParamsMode = 'withReferences',
>(
  params: MockFakerJSGeneratorParams<TMode> = {},
): ModelOrIdNullable<ModelSquare> | null {
  const modelName = 'ModelSquare';

  const { faker = fakerDefault, fakerParams: { probability } = {} } = params;

  return abstractGenerateFn<ModelSquare, TMode>(
    modelName,
    params,
    (callStack) => ({
      kind: 'square' as const,
      sideLength: faker.helpers.maybe(() => faker.number.int(), {
        probability,
      }),
    }),
  );
}

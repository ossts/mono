/* istanbul ignore file */
import { faker as fakerDefault } from '@faker-js/faker';

import { ModelWithDuplicateImports } from '../../common/models';
import { getModelWithStringMockFakerJs } from './ModelWithStringMockFakerJs';
import { abstractGenerateFn, createCallStack } from './helpersMockFakerJs';
import type {
  MockFakerJSGeneratorParams,
  MockFakerJSGeneratorParamsMode,
  ModelOrIdNullable,
} from './typesMockFakerJs';

export function getModelWithDuplicateImportsMockFakerJs<
  TMode extends 'withReferences',
>(
  params?: MockFakerJSGeneratorParams<TMode>,
): ModelOrIdNullable<ModelWithDuplicateImports> | null;

export function getModelWithDuplicateImportsMockFakerJs<
  TMode extends 'standalone',
>(params?: MockFakerJSGeneratorParams<TMode>): ModelWithDuplicateImports | null;

export function getModelWithDuplicateImportsMockFakerJs<
  TMode extends 'primaryKey',
>(params?: MockFakerJSGeneratorParams<TMode>): number | null;

export function getModelWithDuplicateImportsMockFakerJs<
  TMode extends MockFakerJSGeneratorParamsMode = 'withReferences',
>(
  params: MockFakerJSGeneratorParams<TMode> = {},
): ModelOrIdNullable<ModelWithDuplicateImports> | null {
  const modelName = 'ModelWithDuplicateImports';

  const { faker = fakerDefault, fakerParams: { probability } = {} } = params;

  return abstractGenerateFn<ModelWithDuplicateImports, TMode>(
    modelName,
    params,
    (callStack) => ({
      propA: faker.helpers.maybe(
        () =>
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          getModelWithStringMockFakerJs<any>({
            ...params,
            callStack: createCallStack(callStack, modelName, 'propA'),
          }),
        {
          probability,
        },
      ),
      propB: faker.helpers.maybe(
        () =>
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          getModelWithStringMockFakerJs<any>({
            ...params,
            callStack: createCallStack(callStack, modelName, 'propB'),
          }),
        {
          probability,
        },
      ),
      propC: faker.helpers.maybe(
        () =>
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          getModelWithStringMockFakerJs<any>({
            ...params,
            callStack: createCallStack(callStack, modelName, 'propC'),
          }),
        {
          probability,
        },
      ),
    }),
  );
}

/* istanbul ignore file */
import { faker as fakerDefault } from '@faker-js/faker';

import { CompositionWithOneOfAndComplexArrayDictionary } from '../../common/models';
import { abstractGenerateFn, createCallStack } from './helpersMockFakerJs';
import type {
  MockFakerJSGeneratorParams,
  MockFakerJSGeneratorParamsMode,
  ModelOrIdNullable,
} from './typesMockFakerJs';

export function getCompositionWithOneOfAndComplexArrayDictionaryMockFakerJs<
  TMode extends 'withReferences',
>(
  params?: MockFakerJSGeneratorParams<TMode>,
): ModelOrIdNullable<CompositionWithOneOfAndComplexArrayDictionary> | null;

export function getCompositionWithOneOfAndComplexArrayDictionaryMockFakerJs<
  TMode extends 'standalone',
>(
  params?: MockFakerJSGeneratorParams<TMode>,
): CompositionWithOneOfAndComplexArrayDictionary | null;

export function getCompositionWithOneOfAndComplexArrayDictionaryMockFakerJs<
  TMode extends 'primaryKey',
>(params?: MockFakerJSGeneratorParams<TMode>): number | null;

export function getCompositionWithOneOfAndComplexArrayDictionaryMockFakerJs<
  TMode extends MockFakerJSGeneratorParamsMode = 'withReferences',
>(
  params: MockFakerJSGeneratorParams<TMode> = {},
): ModelOrIdNullable<CompositionWithOneOfAndComplexArrayDictionary> | null {
  const modelName = 'CompositionWithOneOfAndComplexArrayDictionary';

  const { faker = fakerDefault, fakerParams: { probability } = {} } = params;

  return abstractGenerateFn<
    CompositionWithOneOfAndComplexArrayDictionary,
    TMode
  >(modelName, params, (callStack) => ({
    propA: faker.helpers.maybe(
      () =>
        faker.helpers.arrayElement([
          faker.datatype.boolean(),
          {
            [faker.string.alpha({
              length: {
                min: 2,
                max: 10,
              },
            })]: faker.helpers.maybe(
              () =>
                faker.helpers.arrayElements([
                  faker.helpers.arrayElement([
                    faker.number.int(),
                    faker.string.alpha({ length: { min: 2, max: 10 } }),
                  ]),
                ]),
              {
                probability,
              },
            ),
          },
        ]),
      {
        probability,
      },
    ),
  }));
}

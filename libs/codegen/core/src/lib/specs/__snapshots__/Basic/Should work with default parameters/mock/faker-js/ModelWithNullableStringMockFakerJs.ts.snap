/* istanbul ignore file */
import { faker as fakerDefault } from '@faker-js/faker';

import { ModelWithNullableString } from '../../common/models';
import { abstractGenerateFn, createCallStack } from './helpersMockFakerJs';
import type {
  MockFakerJSGeneratorParams,
  MockFakerJSGeneratorParamsMode,
  ModelOrIdNullable,
} from './typesMockFakerJs';

export function getModelWithNullableStringMockFakerJs<
  TMode extends 'withReferences',
>(
  params?: MockFakerJSGeneratorParams<TMode>,
): ModelOrIdNullable<ModelWithNullableString> | null;

export function getModelWithNullableStringMockFakerJs<
  TMode extends 'standalone',
>(params?: MockFakerJSGeneratorParams<TMode>): ModelWithNullableString | null;

export function getModelWithNullableStringMockFakerJs<
  TMode extends 'primaryKey',
>(params?: MockFakerJSGeneratorParams<TMode>): number | null;

export function getModelWithNullableStringMockFakerJs<
  TMode extends MockFakerJSGeneratorParamsMode = 'withReferences',
>(
  params: MockFakerJSGeneratorParams<TMode> = {},
): ModelOrIdNullable<ModelWithNullableString> | null {
  const modelName = 'ModelWithNullableString';

  const { faker = fakerDefault, fakerParams: { probability } = {} } = params;

  return abstractGenerateFn<ModelWithNullableString, TMode>(
    modelName,
    params,
    (callStack) => ({
      nullableProp1: faker.helpers.maybe(
        () =>
          faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 2, max: 10 } }),
            null,
          ]),
        {
          probability,
        },
      ),
      nullableRequiredProp1: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 2, max: 10 } }),
        null,
      ]),
      nullableProp2: faker.helpers.maybe(
        () =>
          faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 2, max: 10 } }),
            null,
          ]),
        {
          probability,
        },
      ),
      nullableRequiredProp2: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 2, max: 10 } }),
        null,
      ]),
    }),
  );
}

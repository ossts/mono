import { random } from 'lodash';
import type { ZodFirstPartySchemaTypes } from 'zod';
import { ZodFirstPartyTypeKind } from 'zod';

import {
  type AllApiEntities,
  type AllApiModels,
  allApiEntities,
  apiEntityToPrimaryKeyMapping,
} from '../../common/models';
import {
  entityNameToSchemaZod,
  entityNameToSchemaZodNoPrimaryKey,
} from '../../schema/zod/entityNameToSchemaZod';
import {
  entityNameToWithRefIdsAllowedSchemaZod,
  entityNameToWithRefIdsAllowedSchemaZodNoPrimaryKey,
} from '../../schema/zod/entityNameToWithRefIdsAllowedSchemaZod';
import {
  entityNameToWithRefIdsOnlySchemaZod,
  entityNameToWithRefIdsOnlySchemaZodNoPrimaryKey,
} from '../../schema/zod/entityNameToWithRefIdsOnlySchemaZod';
import * as generators from './';
import type {
  MockFakerJSEForEachEntityRefCallbackParams,
  MockFakerJSEntityToDataMapValue,
  MockFakerJSGeneratorParams,
  MockFakerJSGeneratorParamsCallStack,
  MockFakerJSGeneratorParamsMode,
  ModelOrIdNullable,
} from './typesMockFakerJs';

export function createCallStack(
  ...args: never[]
): MockFakerJSGeneratorParamsCallStack;

export function createCallStack(
  oldStack: MockFakerJSGeneratorParamsCallStack,
  newEntryModelName: AllApiEntities,
  newEntryPath?: string,
): MockFakerJSGeneratorParamsCallStack;

export function createCallStack(
  oldStack: MockFakerJSGeneratorParamsCallStack | undefined,
  newEntryModelName: AllApiEntities,
  newEntryPath?: string,
): MockFakerJSGeneratorParamsCallStack {
  if (!oldStack) {
    return {
      stack: [],
      entriesCallCount: new Map(),
    };
  }

  const newStackStack: string[] = [...oldStack.stack, newEntryModelName];
  if (newEntryPath) {
    newStackStack.push(newEntryPath);
  }

  const newStackEntriesCallCount = new Map<AllApiEntities, number>(
    oldStack.entriesCallCount,
  );

  const newVal = (newStackEntriesCallCount.get(newEntryModelName) ?? 0) + 1;
  newStackEntriesCallCount.set(newEntryModelName, newVal);

  return {
    stack: newStackStack,

    entriesCallCount: newStackEntriesCallCount,
  };
}

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type DictionaryWithAny = Record<string, any>;

// ------- Initialization -------

/**
 * Map of counts each entity should have after initialization
 */
const initialEntitiesCountMap = new Map<AllApiEntities, number>();

/**
 * Map of generated data foe each entity
 */
export const entityToDataMap = new Map<
  AllApiEntities,
  MockFakerJSEntityToDataMapValue
>();

type InitializeFakerJSGenerateEntitiesCount = Partial<
  Record<AllApiEntities | 'default', number | [number, number]>
>;

export interface InitializeFakerJSParams {
  /**
   * Amount of items to generate based on entity model name.
   *
   * `default` key will be used if no explicit amount set for entity.
   * Default value for it is `[5, 100]`.
   */
  generateEntitiesCount?: InitializeFakerJSGenerateEntitiesCount;

  /**
   * Initial data to use, instead of generating new one.
   */
  initialData?: [AllApiEntities, [string | number, DictionaryWithAny][]][];

  /**
   * Params that will be passed to FakerJS generator function
   */
  generatorParams?: MockFakerJSGeneratorParams;
}

type InitializeFakerJS = (params: InitializeFakerJSParams) => void;

export const initialize: InitializeFakerJS = (params) => {
  const { initialData } = params;

  resetState();

  if (!initialData) {
    setInitialEntitiesCounts(params);
    generateInitialEntities(params);
  } else {
    registerMultipleEntities(params);
  }
};

/**
 * This should reset any previous state so we can start from scratch
 */
const resetState = () => {
  entityToDataMap.clear();
  initialEntitiesCountMap.clear();

  modelDependenciesMap.clear();
  modelRefsMap.clear();

  // we have to initialize "entityToDataMap" with empty maps for all models
  // otherwise we can get error when model has dependencies
  allApiEntities.map((entityName) => {
    let dataMap = entityToDataMap.get(entityName);
    if (dataMap) return;

    dataMap = new Map();
    entityToDataMap.set(entityName, dataMap);
  });
};

/**
 * Registers multiple entities based on provided params
 */
const registerMultipleEntities = (params: InitializeFakerJSParams) => {
  const { initialData, generatorParams } = params;

  initialData?.forEach(([entityName, models]) =>
    models.forEach(([, model]) => {
      registerEntityAndReturnId(
        entityName,
        model,
        generatorParams?.preventReferenceResolve,
      );
    }),
  );
};

const setInitialEntitiesCounts = (
  params: InitializeFakerJSParams = {},
): void => {
  const { generateEntitiesCount = {} } = params;

  const defaultCount = generateEntitiesCount.default ?? [5, 100];

  allApiEntities.forEach((entityName) => {
    const range = generateEntitiesCount[entityName] ?? defaultCount;
    const rangeArray = Array.isArray(range) ? range : [range, range];
    const count = random(rangeArray[0], rangeArray[1]);
    initialEntitiesCountMap.set(entityName, count);
  });
};

/**
 * Map of current Model to all it's dependencies.
 *
 * This should be updated on any CRUD operation and kept in sync with `modelRefsMap`.
 */
export const modelDependenciesMap = new Map<AllApiModels, Set<AllApiModels>>();

/**
 *  Map of current Model to all Models which rely on it's existence.
 *
 * This should be updated on any CRUD operation and kept in sync with `modelDependenciesMap`.
 */
export const modelRefsMap = new Map<AllApiModels, Set<AllApiModels>>();

const generateInitialEntities = (params: InitializeFakerJSParams = {}) =>
  allApiEntities.forEach((entityName) => {
    const count = initialEntitiesCountMap.get(entityName);
    if (count === undefined)
      throw new Error(`No counts available for entity "${entityName}"`);

    const dataMap = entityToDataMap.get(entityName);
    if (!dataMap) return;

    if (count <= 0) return;

    // we use condition here because entities can be called in result of creating dependencies for other entities
    generateEntities(
      entityName,
      () => dataMap.size < count,
      params.generatorParams,
    );
  });

/**
 * Generates and returns ids
 */
const generateEntities = (
  entityName: string,
  countOrCondition: number | (() => boolean) = 1,
  params?: MockFakerJSGeneratorParams,
): void => {
  while (
    typeof countOrCondition === 'number'
      ? countOrCondition--
      : countOrCondition()
  ) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const generate = (generators as any)[`get${entityName}MockFakerJs`];
    if (!generate)
      throw new Error(`Unable to find generator for entity "${entityName}"`);

    // the actual save into `entityToDataMap` will happen in faker generator
    // this is required, because most of the models would have dependencies
    generate(params);
  }
};

export const removeEntityIfAllowed = (
  entityName: AllApiEntities,
  id: number | string,
): [isRemoved: boolean, message?: string] => {
  const targetMap = entityToDataMap.get(entityName);
  const targeEntity = targetMap?.get(id);

  if (!targeEntity)
    return [false, `Entity: "${entityName}" with id: "${id}" not found`];

  const [canRemove, reason] = entityCanBeRemoved(targeEntity);
  if (!canRemove) return [false, reason];

  removeAllModelDependencyRelations(targeEntity);
  targetMap?.delete(id);

  return [true];
};

export const entityCanBeRemoved = (
  entity: AllApiModels,
): [canRemove: boolean, reason?: string] => {
  const refs = modelRefsMap.get(entity);

  if (!refs?.size) return [true];

  return [
    false,
    `Cannot be removed. There are ${refs.size} entities which rely on it's existence.`,
  ];
};

export const updateEntity = (
  entityName: AllApiEntities,
  rawModel: AllApiModels.NoPrimaryKey,
  // params: MockFakerJSGeneratorParams = {}
): void => {
  const primaryKeyName = apiEntityToPrimaryKeyMapping[entityName];
  if (!primaryKeyName)
    throw new Error(`No primary key available for entity "${entityName}"`);

  const targetMap = entityToDataMap.get(entityName);
  if (!targetMap)
    throw new Error(`No dataMap available for entity "${entityName}"`);

  const idVal = (rawModel as DictionaryWithAny)[primaryKeyName];
  if (!idVal)
    throw new Error(`Unable to update entity. Provided entity has no ID`);

  const previousModel = targetMap.get(idVal);
  if (!previousModel)
    throw new Error(
      `Unable to update entity. No entity "${entityName}" with ID "${idVal}" registered yet.`,
    );
  const previousModelAsRecord = previousModel as DictionaryWithAny;

  const schema = getZodSchemaForEntity(entityName, 'withRefIdsAllowed');
  const model: AllApiModels = schema.parse(rawModel);

  // register references for new model instance and unregister refs for old one
  forEachEntityRef(entityName, ({ fieldName }) => {
    // we have to remove all previous refs of this model to other
    // refs of other models to previousModel will be updated later
    const oldRefs = previousModelAsRecord[fieldName];
    if (oldRefs) {
      if (Array.isArray(oldRefs)) {
        oldRefs.forEach((oldRef) =>
          removeDependencyRelations(previousModel, oldRef),
        );
      } else {
        removeDependencyRelations(previousModel, oldRefs);
      }
    }
  });

  // for all models which reference previousModel - set ref to new one
  const refsSet = modelRefsMap.get(previousModel);
  if (refsSet?.size) {
    for (const refModel of refsSet) {
      const subRefsSet = modelDependenciesMap.get(refModel);
      if (subRefsSet) {
        // here we remove ref to previous model
        subRefsSet.delete(previousModel);

        // and create relations with new one
        // here it's correct that ref and model are swapped, because we update dependency
        addDependencyRelations(refModel, model);
      }
    }
  }
  modelRefsMap.delete(previousModel);

  targetMap.delete(idVal);
  registerEntityAndReturnId(entityName, model);
};

/**
 * Takes entity without ID and registers it in system with unique ID.
 *
 * Returns newly created model.
 */
export const createEntity = (
  entityName: AllApiEntities,
  rawModelNoId: AllApiModels.NoPrimaryKey,
  params: MockFakerJSGeneratorParams = {},
): AllApiModels => {
  const primaryKeyName = apiEntityToPrimaryKeyMapping[entityName];
  if (!primaryKeyName)
    throw new Error(`No primary key available for entity "${entityName}"`);

  const schema = getZodSchemaForEntity(
    entityName,
    'withRefIdsAllowed',
    'noPrimaryKey',
  );
  const model: AllApiModels = schema.parse(rawModelNoId);

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const generate = (generators as any)[`get${entityName}MockFakerJs`];
  if (!generate)
    throw new Error(`Unable to find generator for entity "${entityName}"`);

  params.mode = 'primaryKey';
  const newId = generate(params);

  (model as DictionaryWithAny)[primaryKeyName] = newId;

  registerEntityAndReturnId(entityName, model);

  return model;
};

/**
 * Registers entity in `entityToDataMap` with all it's references
 * and update entity dependencies references.
 *
 * Returns id of entity
 */
export const registerEntityAndReturnId = (
  entityName: AllApiEntities,
  model: AllApiModels,
  skipReferenceResolve = false,
): number | string => {
  // 1. Validate input
  const schema = getZodSchemaForEntity(entityName, 'withRefIdsAllowed');
  model = schema.parse(model);

  // 2. Register entity itself itself
  const idProp = apiEntityToPrimaryKeyMapping[entityName];
  if (!idProp)
    throw new Error(`Unable to register entity "${entityName}" without ID`);

  const idVal = (model as DictionaryWithAny)[idProp];
  if (!idVal)
    throw new Error(`Unable to register entity. Provided entity has no ID`);

  const targetMap = entityToDataMap.get(entityName);
  if (!targetMap)
    throw new Error(`No dataMap available for entity "${entityName}"`);

  if (targetMap.get(idVal))
    throw new Error(
      `Unable to register entity. Entity "${entityName}" with ID "${idVal}" already registered.`,
    );

  targetMap.set(idVal, model);

  // 3. Register all references which are provided are standalone values (not ref ids)
  // and replace their standalone reference values with ids
  forEachEntityRef(entityName, ({ fieldName, refName }) => {
    const modelAsRecord = model as DictionaryWithAny;
    const modelFieldVal = modelAsRecord[fieldName];
    if (!modelFieldVal) return;

    if (Array.isArray(modelFieldVal)) {
      modelAsRecord[fieldName] = modelFieldVal.map((subModelOrId) => {
        if (['string', 'number'].includes(typeof subModelOrId))
          return subModelOrId;

        return registerEntityAndReturnId(refName, subModelOrId);
      });
    } else if (!['string', 'number'].includes(typeof modelFieldVal)) {
      modelAsRecord[fieldName] = registerEntityAndReturnId(
        refName,
        modelFieldVal,
      );
    }
  });

  // 4. Resolve dependencies starting from leaf nodes
  if (!skipReferenceResolve) {
    updateEntityReferences(entityName, model);
  }

  return idVal;
};

const zodSchemaTypeToEntitySchema = {
  default: {
    default: entityNameToSchemaZod,
    withRefIdsAllowed: entityNameToWithRefIdsAllowedSchemaZod,
    withRefIdsOnly: entityNameToWithRefIdsOnlySchemaZod,
  },
  noPrimaryKey: {
    default: entityNameToSchemaZodNoPrimaryKey,
    withRefIdsAllowed: entityNameToWithRefIdsAllowedSchemaZodNoPrimaryKey,
    withRefIdsOnly: entityNameToWithRefIdsOnlySchemaZodNoPrimaryKey,
  },
};
export const getZodSchemaForEntity = (
  entityName: AllApiEntities,
  schemaType: 'default' | 'withRefIdsAllowed' | 'withRefIdsOnly' = 'default',
  schemaGroup: 'default' | 'noPrimaryKey' = 'default',
) => {
  const schema =
    zodSchemaTypeToEntitySchema[schemaGroup][schemaType][entityName];
  if (!('shape' in schema))
    throw new Error(
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      `Unhandled zod schema type "${(schema as any)._def.typeName}"`,
    );

  return schema;
};

/**
 * Updates references relation for current field.
 */
const updateEntityReferences = (
  entityName: AllApiEntities,
  model: DictionaryWithAny,
) =>
  forEachEntityRef(entityName, ({ fieldName, refName, refModelsMap }) => {
    const modelAsRecord = model as DictionaryWithAny;
    const modelFieldVal = modelAsRecord[fieldName];

    if (!modelFieldVal) return;

    if (Array.isArray(modelFieldVal)) {
      const ids = modelFieldVal.filter(Boolean);
      ids.forEach((val) => {
        const refModel = refModelsMap.get(val);

        if (!refModel) {
          throw new Error(
            `No matching record found for model "${refName}" with value "${val}"`,
          );
        }

        addDependencyRelations(model, refModel);

        return refModel;
      });
      // using getter here would make sure that we always reference latest version
      // which may change during update operations
      Object.defineProperty(modelAsRecord, fieldName, {
        enumerable: true,
        get: () => ids.map((val) => refModelsMap.get(val)),
      });
      return;
    }

    const refModel = refModelsMap.get(modelFieldVal);
    if (!refModel) {
      throw new Error(
        `No matching record found for model "${refName}" with value "${modelFieldVal}"`,
      );
    }

    // using getter here would make sure that we always reference latest version
    // which may change during update operations
    Object.defineProperty(modelAsRecord, fieldName, {
      get: () => refModelsMap.get(modelFieldVal),
      enumerable: true,
    });
    addDependencyRelations(model, refModel);
  });

/**
 * Calls callback function for each reference field in Zod schema
 */
const forEachEntityRef = (() => {
  const cache = new Map<
    AllApiEntities,
    MockFakerJSEForEachEntityRefCallbackParams[]
  >();

  return (
    entityName: AllApiEntities,
    cb: (params: MockFakerJSEForEachEntityRefCallbackParams) => void,
  ) => {
    const cachedVal = cache.get(entityName);
    if (cachedVal) return cachedVal.forEach(cb);

    const schema = getZodSchemaForEntity(entityName);

    const cbParams = Object.entries(schema.shape).reduce<
      MockFakerJSEForEachEntityRefCallbackParams[]
    >((acc, [fieldName, fieldVal]) => {
      const refName = getReferenceName(fieldVal);

      if (!refName) return acc;

      const refModelsMap = entityToDataMap.get(refName);
      if (!refModelsMap)
        throw new Error(
          `No model available in entityToDataMap for "${refName}}"`,
        );

      const params: MockFakerJSEForEachEntityRefCallbackParams = {
        fieldName,
        refName,
        refModelsMap,
      };

      acc.push(params);

      cb(params);

      return acc;
    }, []);

    cache.set(entityName, cbParams);
  };
})();

/**
 * Update dependency maps with new relation
 */
const addDependencyRelations = (
  model: AllApiModels,
  refModel: AllApiModels,
) => {
  const dependenciesSet = modelDependenciesMap.get(model) ?? new Set();
  dependenciesSet.add(refModel);
  modelDependenciesMap.set(model, dependenciesSet);

  const refsSet = modelRefsMap.get(refModel) ?? new Set();
  refsSet.add(model);
  modelRefsMap.set(refModel, refsSet);
};

/**
 * Remove dependency maps for specific relation
 */
const removeDependencyRelations = (
  model: AllApiModels,
  refModel: AllApiModels,
) => {
  const dependenciesSet = modelDependenciesMap.get(model);
  const refsSet = modelRefsMap.get(refModel);
  if (!dependenciesSet?.size || !refsSet?.size)
    throw new Error('Relations mapping is broken');

  dependenciesSet.delete(refModel);
  refsSet.delete(model);
};

/**
 * Remove dependency relations for model.
 *
 * Always use this before removing actual model.
 */
const removeAllModelDependencyRelations = (model: AllApiModels) => {
  // at this point there should be no references to current model
  const [canRemove] = entityCanBeRemoved(model);
  if (!canRemove)
    throw new Error(
      `You cannot remove model which still have dependencies. Use "entityCanBeRemoved" before calling this.`,
    );

  modelRefsMap.delete(model);

  const modelDependenciesSet = modelDependenciesMap.get(model);
  if (modelDependenciesSet) {
    // clear all references to current model
    for (const dependentModel of modelDependenciesSet) {
      const dependentModelDependenciesSet = modelRefsMap.get(dependentModel);

      // this should never happen
      if (!dependentModelDependenciesSet)
        throw new Error('Relations mapping is broken');

      dependentModelDependenciesSet.delete(model);

      if (!dependentModelDependenciesSet.size) {
        modelRefsMap.delete(dependentModel);
      }
    }
  }
  // remove set of dependencies for current model
  modelDependenciesMap.delete(model);
};

const getReferenceName = (() => {
  const cache = new Map<ZodFirstPartySchemaTypes, AllApiEntities>();

  return (val: ZodFirstPartySchemaTypes): AllApiEntities | null => {
    const cachedVal = cache.get(val);
    if (cachedVal) return cachedVal;

    const ref = getZodReference(val);
    if (!ref) return null;

    const modelName = ref.description?.split('---')[0]?.split(':')[1];

    if (!modelName) {
      throw new Error(
        'Reference is detected, but no "Model:[ModelName]--" present in Zod schema description.',
      );
    }

    cache.set(val, modelName as AllApiEntities);

    return modelName as AllApiEntities;
  };
})();

const getZodReference = (
  val: ZodFirstPartySchemaTypes,
): ZodFirstPartySchemaTypes | null => {
  // TODO: handle types like union, array, intersection, etc.
  switch (val._def.typeName) {
    case ZodFirstPartyTypeKind.ZodObject:
      return val;
    case ZodFirstPartyTypeKind.ZodNullable:
      return getZodReference(val._def.innerType);
    case ZodFirstPartyTypeKind.ZodOptional:
      return getZodReference(val._def.innerType);
    case ZodFirstPartyTypeKind.ZodArray:
      return getZodReference(val._def.type);
    case ZodFirstPartyTypeKind.ZodUnion:
      return getZodReference(val._def.options);
  }

  return null;
};

type AbstractGenerateFnDef<TModel extends AllApiModels> = (
  callStack: MockFakerJSGeneratorParamsCallStack,
) => ModelOrIdNullable<TModel>;

export function abstractGenerateFn<
  TModel extends AllApiModels,
  TMode extends MockFakerJSGeneratorParamsMode = 'withReferences',
>(
  modelName: AllApiEntities,
  params: MockFakerJSGeneratorParams<TMode>,
  generatorFn: AbstractGenerateFnDef<TModel>,
): ModelOrIdNullable<TModel> | null {
  const idProp = apiEntityToPrimaryKeyMapping[modelName];

  const {
    mode = 'withReferences',
    callStack = createCallStack(),
    preventReferenceResolve,
  } = params;

  const callCount = callStack.entriesCallCount.get(modelName) ?? 0;
  if (callCount > 10) return null;
  const isRoot = callStack.stack.length === 0;

  const hasPrimaryKey = !!idProp;

  if (!isRoot && mode === 'primaryKey') return null;

  const result = generatorFn(callStack);

  if (mode === 'primaryKey') {
    return (result as DictionaryWithAny)[idProp];
  }

  if (mode === 'standalone') return result;

  if (!hasPrimaryKey) {
    return isRoot ? result : null;
  }

  const targeMap = entityToDataMap.get(modelName);
  if (!targeMap)
    throw new Error(`No dataMap available for entity "${modelName}"`);

  const idVal = (result as DictionaryWithAny)[idProp];
  if (!idVal) {
    return isRoot ? result : null;
  }

  registerEntityAndReturnId(modelName, result, preventReferenceResolve);

  return isRoot ? result : idVal;
}

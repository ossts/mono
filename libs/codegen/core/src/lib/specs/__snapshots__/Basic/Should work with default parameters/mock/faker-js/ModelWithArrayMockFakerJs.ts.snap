/* istanbul ignore file */
import { faker as fakerDefault } from '@faker-js/faker';

import { ModelWithArray } from '../../common/models';
import { getModelWithStringMockFakerJs } from './ModelWithStringMockFakerJs';
import { abstractGenerateFn, createCallStack } from './helpersMockFakerJs';
import type {
  MockFakerJSGeneratorParams,
  MockFakerJSGeneratorParamsMode,
  ModelOrIdNullable,
} from './typesMockFakerJs';

export function getModelWithArrayMockFakerJs<TMode extends 'withReferences'>(
  params?: MockFakerJSGeneratorParams<TMode>,
): ModelOrIdNullable<ModelWithArray> | null;

export function getModelWithArrayMockFakerJs<TMode extends 'standalone'>(
  params?: MockFakerJSGeneratorParams<TMode>,
): ModelWithArray | null;

export function getModelWithArrayMockFakerJs<TMode extends 'primaryKey'>(
  params?: MockFakerJSGeneratorParams<TMode>,
): number | null;

export function getModelWithArrayMockFakerJs<
  TMode extends MockFakerJSGeneratorParamsMode = 'withReferences',
>(
  params: MockFakerJSGeneratorParams<TMode> = {},
): ModelOrIdNullable<ModelWithArray> | null {
  const modelName = 'ModelWithArray';

  const { faker = fakerDefault, fakerParams: { probability } = {} } = params;

  return abstractGenerateFn<ModelWithArray, TMode>(
    modelName,
    params,
    (callStack) => ({
      prop: faker.helpers.maybe(
        () =>
          faker.helpers.arrayElements(
            [
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              getModelWithStringMockFakerJs<any>({
                ...params,
                callStack: createCallStack(callStack, modelName, 'prop'),
              }),
            ]
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              .filter(Boolean) as any,
          ),
        {
          probability,
        },
      ),
      propWithFile: faker.helpers.maybe(
        () =>
          faker.helpers.arrayElements([
            faker.number.binary({ min: 0, max: 1024 }),
          ]),
        {
          probability,
        },
      ),
      propWithNumber: faker.helpers.maybe(
        () => faker.helpers.arrayElements([faker.number.int()]),
        {
          probability,
        },
      ),
    }),
  );
}

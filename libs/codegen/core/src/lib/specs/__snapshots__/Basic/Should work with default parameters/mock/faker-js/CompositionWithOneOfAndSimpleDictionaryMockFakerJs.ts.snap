/* istanbul ignore file */
import { faker as fakerDefault } from '@faker-js/faker';

import { CompositionWithOneOfAndSimpleDictionary } from '../../common/models';
import { abstractGenerateFn, createCallStack } from './helpersMockFakerJs';
import type {
  MockFakerJSGeneratorParams,
  MockFakerJSGeneratorParamsMode,
  ModelOrIdNullable,
} from './typesMockFakerJs';

export function getCompositionWithOneOfAndSimpleDictionaryMockFakerJs<
  TMode extends 'withReferences',
>(
  params?: MockFakerJSGeneratorParams<TMode>,
): ModelOrIdNullable<CompositionWithOneOfAndSimpleDictionary> | null;

export function getCompositionWithOneOfAndSimpleDictionaryMockFakerJs<
  TMode extends 'standalone',
>(
  params?: MockFakerJSGeneratorParams<TMode>,
): CompositionWithOneOfAndSimpleDictionary | null;

export function getCompositionWithOneOfAndSimpleDictionaryMockFakerJs<
  TMode extends 'primaryKey',
>(params?: MockFakerJSGeneratorParams<TMode>): number | null;

export function getCompositionWithOneOfAndSimpleDictionaryMockFakerJs<
  TMode extends MockFakerJSGeneratorParamsMode = 'withReferences',
>(
  params: MockFakerJSGeneratorParams<TMode> = {},
): ModelOrIdNullable<CompositionWithOneOfAndSimpleDictionary> | null {
  const modelName = 'CompositionWithOneOfAndSimpleDictionary';

  const { faker = fakerDefault, fakerParams: { probability } = {} } = params;

  return abstractGenerateFn<CompositionWithOneOfAndSimpleDictionary, TMode>(
    modelName,
    params,
    (callStack) => ({
      propA: faker.helpers.maybe(
        () =>
          faker.helpers.arrayElement([
            faker.datatype.boolean(),
            {
              [faker.string.alpha({
                length: {
                  min: 2,
                  max: 10,
                },
              })]: faker.helpers.maybe(() => faker.number.int(), {
                probability,
              }),
            },
          ]),
        {
          probability,
        },
      ),
    }),
  );
}

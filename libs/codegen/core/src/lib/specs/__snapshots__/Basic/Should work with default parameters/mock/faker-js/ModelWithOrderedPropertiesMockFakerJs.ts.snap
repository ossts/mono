/* istanbul ignore file */
import { faker as fakerDefault } from '@faker-js/faker';

import { ModelWithOrderedProperties } from '../../common/models';
import { abstractGenerateFn, createCallStack } from './helpersMockFakerJs';
import type {
  MockFakerJSGeneratorParams,
  MockFakerJSGeneratorParamsMode,
  ModelOrIdNullable,
} from './typesMockFakerJs';

export function getModelWithOrderedPropertiesMockFakerJs<
  TMode extends 'withReferences',
>(
  params?: MockFakerJSGeneratorParams<TMode>,
): ModelOrIdNullable<ModelWithOrderedProperties> | null;

export function getModelWithOrderedPropertiesMockFakerJs<
  TMode extends 'standalone',
>(
  params?: MockFakerJSGeneratorParams<TMode>,
): ModelWithOrderedProperties | null;

export function getModelWithOrderedPropertiesMockFakerJs<
  TMode extends 'primaryKey',
>(params?: MockFakerJSGeneratorParams<TMode>): number | null;

export function getModelWithOrderedPropertiesMockFakerJs<
  TMode extends MockFakerJSGeneratorParamsMode = 'withReferences',
>(
  params: MockFakerJSGeneratorParams<TMode> = {},
): ModelOrIdNullable<ModelWithOrderedProperties> | null {
  const modelName = 'ModelWithOrderedProperties';

  const { faker = fakerDefault, fakerParams: { probability } = {} } = params;

  return abstractGenerateFn<ModelWithOrderedProperties, TMode>(
    modelName,
    params,
    (callStack) => ({
      zebra: faker.helpers.maybe(
        () => faker.string.alpha({ length: { min: 2, max: 10 } }),
        {
          probability,
        },
      ),
      apple: faker.helpers.maybe(
        () => faker.string.alpha({ length: { min: 2, max: 10 } }),
        {
          probability,
        },
      ),
      hawaii: faker.helpers.maybe(
        () => faker.string.alpha({ length: { min: 2, max: 10 } }),
        {
          probability,
        },
      ),
    }),
  );
}

/* istanbul ignore file */
import { faker as fakerDefault } from '@faker-js/faker';

import { ModelWithProperties } from '../../common/models';
import { getModelWithStringMockFakerJs } from './ModelWithStringMockFakerJs';
import { abstractGenerateFn, createCallStack } from './helpersMockFakerJs';
import type {
  MockFakerJSGeneratorParams,
  MockFakerJSGeneratorParamsMode,
  ModelOrIdNullable,
} from './typesMockFakerJs';

export function getModelWithPropertiesMockFakerJs<
  TMode extends 'withReferences'
>(
  params?: MockFakerJSGeneratorParams<TMode>
): ModelOrIdNullable<ModelWithProperties> | null | ModelWithProperties['id'];

export function getModelWithPropertiesMockFakerJs<TMode extends 'standalone'>(
  params?: MockFakerJSGeneratorParams<TMode>
): ModelWithProperties | null;

export function getModelWithPropertiesMockFakerJs<
  TMode extends MockFakerJSGeneratorParamsMode = 'withReferences'
>(
  params: MockFakerJSGeneratorParams<TMode> = {}
): ModelOrIdNullable<ModelWithProperties> | null | ModelWithProperties['id'] {
  const modelName = 'ModelWithProperties';

  const { faker = fakerDefault, fakerParams: { probability } = {} } = params;

  return abstractGenerateFn<ModelWithProperties, TMode>(
    modelName,
    params,
    (callStack) => ({
      required: faker.string.alpha({ length: { min: 2, max: 10 } }),
      requiredAndReadOnly: faker.string.alpha({ length: { min: 2, max: 10 } }),
      requiredAndNullable: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 2, max: 10 } }),
        null,
      ]),
      string: faker.helpers.maybe(
        () => faker.string.alpha({ length: { min: 2, max: 10 } }),
        {
          probability,
        }
      ),
      number: faker.helpers.maybe(() => faker.number.int(), {
        probability,
      }),
      boolean: faker.helpers.maybe(() => faker.datatype.boolean(), {
        probability,
      }),
      reference: faker.helpers.maybe(
        () =>
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          getModelWithStringMockFakerJs<any>({
            ...params,
            callStack: createCallStack(callStack, modelName, 'reference'),
          }),
        {
          probability,
        }
      ),
      'property with space': faker.helpers.maybe(
        () => faker.string.alpha({ length: { min: 2, max: 10 } }),
        {
          probability,
        }
      ),
      default: faker.helpers.maybe(
        () => faker.string.alpha({ length: { min: 2, max: 10 } }),
        {
          probability,
        }
      ),
      try: faker.helpers.maybe(
        () => faker.string.alpha({ length: { min: 2, max: 10 } }),
        {
          probability,
        }
      ),
      '@namespace.string': faker.helpers.maybe(
        () => faker.string.alpha({ length: { min: 2, max: 10 } }),
        {
          probability,
        }
      ),
      '@namespace.integer': faker.helpers.maybe(() => faker.number.int(), {
        probability,
      }),
    })
  );
}

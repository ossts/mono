/* istanbul ignore file */
import { faker as fakerDefault } from '@faker-js/faker';

import { getModelWithStringMockFakerJs } from './ModelWithStringMockFakerJs';
import type { MockFakerJSGeneratorParams } from './typesMockFakerJs';

export const getModelWithPropertiesMockFakerJs = (
  params?: MockFakerJSGeneratorParams
) => {
  const { faker = fakerDefault } = params ?? {};

  return {
    required: faker.string.alpha({ length: { min: 2, max: 10 } }),
    requiredAndReadOnly: faker.string.alpha({ length: { min: 2, max: 10 } }),
    requiredAndNullable: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 2, max: 10 } }),
      null,
    ]),
    string: faker.helpers.maybe(() =>
      faker.string.alpha({ length: { min: 2, max: 10 } })
    ),
    number: faker.helpers.maybe(() => faker.number.int()),
    boolean: faker.helpers.maybe(() => faker.datatype.boolean()),
    reference: faker.helpers.maybe(() => getModelWithStringMockFakerJs(params)),
    'property with space': faker.helpers.maybe(() =>
      faker.string.alpha({ length: { min: 2, max: 10 } })
    ),
    default: faker.helpers.maybe(() =>
      faker.string.alpha({ length: { min: 2, max: 10 } })
    ),
    try: faker.helpers.maybe(() =>
      faker.string.alpha({ length: { min: 2, max: 10 } })
    ),
    '@namespace.string': faker.helpers.maybe(() =>
      faker.string.alpha({ length: { min: 2, max: 10 } })
    ),
    '@namespace.integer': faker.helpers.maybe(() => faker.number.int()),
  };
};

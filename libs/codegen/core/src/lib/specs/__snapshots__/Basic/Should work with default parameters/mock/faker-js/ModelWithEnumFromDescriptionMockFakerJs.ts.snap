/* istanbul ignore file */
import { faker as fakerDefault } from '@faker-js/faker';

import { ModelWithEnumFromDescription } from '../../common/models';
import { abstractGenerateFn, createCallStack } from './helpersMockFakerJs';
import type {
  MockFakerJSGeneratorParams,
  MockFakerJSGeneratorParamsMode,
  ModelOrIdNullable,
} from './typesMockFakerJs';

export function getModelWithEnumFromDescriptionMockFakerJs<
  TMode extends 'withReferences'
>(
  params?: MockFakerJSGeneratorParams<TMode>
): ModelOrIdNullable<ModelWithEnumFromDescription> | null;

export function getModelWithEnumFromDescriptionMockFakerJs<
  TMode extends 'standalone'
>(
  params?: MockFakerJSGeneratorParams<TMode>
): ModelWithEnumFromDescription | null;

export function getModelWithEnumFromDescriptionMockFakerJs<
  TMode extends 'primaryKey'
>(params?: MockFakerJSGeneratorParams<TMode>): number | null;

export function getModelWithEnumFromDescriptionMockFakerJs<
  TMode extends MockFakerJSGeneratorParamsMode = 'withReferences'
>(
  params: MockFakerJSGeneratorParams<TMode> = {}
): ModelOrIdNullable<ModelWithEnumFromDescription> | null {
  const modelName = 'ModelWithEnumFromDescription';

  const { faker = fakerDefault, fakerParams: { probability } = {} } = params;

  return abstractGenerateFn<ModelWithEnumFromDescription, TMode>(
    modelName,
    params,
    (callStack) => ({
      test: faker.helpers.maybe(() => faker.number.int(), {
        probability,
      }),
    })
  );
}

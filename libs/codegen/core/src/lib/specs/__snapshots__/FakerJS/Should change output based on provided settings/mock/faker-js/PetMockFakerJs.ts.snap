/* istanbul ignore file */
import { faker as fakerDefault } from '@faker-js/faker';

import { Pet } from '../../common/models';
import { getCategoryMockFakerJs } from './CategoryMockFakerJs';
import { getTagMockFakerJs } from './TagMockFakerJs';
import { abstractGenerateFn, createCallStack } from './helpersMockFakerJs';
import type {
  MockFakerJSGeneratorParams,
  MockFakerJSGeneratorParamsMode,
  ModelOrIdNullable,
} from './typesMockFakerJs';

export function getPetMockFakerJs<TMode extends 'withReferences'>(
  params?: MockFakerJSGeneratorParams<TMode>
): ModelOrIdNullable<Pet> | null | Pet['id'];

export function getPetMockFakerJs<TMode extends 'standalone'>(
  params?: MockFakerJSGeneratorParams<TMode>
): Pet | null;

export function getPetMockFakerJs<
  TMode extends MockFakerJSGeneratorParamsMode = 'withReferences'
>(
  params: MockFakerJSGeneratorParams<TMode> = {}
): ModelOrIdNullable<Pet> | null | Pet['id'] {
  const modelName = 'Pet';

  const { faker = fakerDefault, fakerParams: { probability } = {} } = params;

  return abstractGenerateFn<Pet, TMode>(modelName, params, (callStack) => ({
    id: faker.helpers.maybe(() => faker.string.uid(), {
      probability,
    }),
    category: faker.helpers.maybe(
      () =>
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        getCategoryMockFakerJs<any>({
          ...params,
          callStack: createCallStack(callStack, modelName, 'category'),
        }),
      {
        probability,
      }
    ),
    name: faker.string.alpha(10),
    photoUrls: faker.helpers.arrayElements([
      faker.string.alpha({ length: { min: 2, max: 10 } }),
    ]),
    tags: faker.helpers.maybe(
      () =>
        faker.helpers.arrayElements(
          [
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            getTagMockFakerJs<any>({
              ...params,
              callStack: createCallStack(callStack, modelName, 'tags'),
            }),
          ]
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            .filter(Boolean) as any
        ),
      {
        probability,
      }
    ),
    status: faker.helpers.maybe(() => faker.helpers.enumValue(Pet.status), {
      probability,
    }),
  }));
}

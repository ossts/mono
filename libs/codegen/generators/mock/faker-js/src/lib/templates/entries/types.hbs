import { type Faker } from '@faker-js/faker';

import type { AllApiEntities, AllApiModels } from '../../common/models';

/**
 * `standalone` - generated result will have all required information
 *
 * `withReferences` - will only generate fields of current entity. All reference type will have actual references.
 */
export type MockFakerJSGeneratorParamsMode =
  | 'standalone'
  | 'withReferences'
  | 'primaryKey';

export type MockFakerJSGeneratorParamsCallStack = {
  /**
   * Full path to current property.
   *
   * Will always start with `$$root$$` if any nesting is present
   */
  stack: string[];

  /**
   * Keep track for number of times specific entity has been called.
   * This is required to prevent endless recursion calls.
   */
  entriesCallCount: Map<AllApiEntities, number>;
};

export type MockFakerJSGeneratorParams<
  TMode extends MockFakerJSGeneratorParamsMode = MockFakerJSGeneratorParamsMode
> = {
  /**
   * Faker instance
   */
  faker?: Faker;

  /**
   * Various settings to allow override of defaults
   */
  fakerParams?: MockFakerJSGeneratorParamsFakerParams;

  /**
   * Defaults to `withReferences`
   */
  mode?: TMode;

  /**
   * If `true` - will prevent automatic reference resolving for newly created entities.
   *
   * This can be useful if you want to generate set of data and store it somewhere.
   *
   * Only applicable if `mode="withReferences"`.
   *
   * Default to `false`
   */
  preventReferenceResolve?: boolean;

  /**
   * Callstack of all references up to this moment.
   * This is required to prevent infinite circular references.
   */
  callStack?: MockFakerJSGeneratorParamsCallStack;
};

export interface MockFakerJSGeneratorParamsFakerParams {
  /**
   * This would override probability change of https://fakerjs.dev/api/helpers#maybe.
   */
  probability?: number;
}

export type ModelOrIdNullable<TModel extends AllApiModels> = {
  [Property in keyof TModel]?: Required<TModel>[Property] extends AllApiModels
    ? TModel[Property] | string | number | null
    : TModel[Property];
};

export type MockFakerJSEntityToDataMapValue = Map<
  string | number,
  AllApiModels
>;

export interface MockFakerJSEForEachEntityRefCallbackParams {
  fieldName: string;
  refName: AllApiEntities;
  refModelsMap: MockFakerJSEntityToDataMapValue;
}
